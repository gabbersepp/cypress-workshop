{
	// Place your FirstAIDApp.AutomationTests-Arbeitsbereich snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Cypress Ticket Test": {
		"scope": "typescript",
		"prefix": [
			"cypress test"
		],
		"body": [
			"import TicketProvider from \"../../../../api/provider/TicketProvider\";",
			"import DependencyResolver from \"../../../../utils/DependencyResolver\";",
			"import { loginThroughAPI } from \"../../support/BaseUiFunctions\";",
			"import Context from \"../../support/Context\";",
			"import { _beforeEach, _it } from \"../../support/EnhanceCypress\";",
			"import TicketPage from \"../../support/pages/TicketPage\";",
			"import UiTicketProvider from \"../../support/provider/UiTicketProvider\";",
			"",
			"describe(\"${1:suiteName}\", () => {",
			"    let ticketPage: TicketPage;",
			"    let uiTicketProvider: UiTicketProvider;",
			"    let ticketProvider: TicketProvider;",
			"",
			"    _beforeEach([], (ctx: Context) => {",
			"        ticketPage = DependencyResolver.resolve<TicketPage>(TicketPage);",
			"        ticketProvider = DependencyResolver.resolve<TicketProvider>(TicketProvider);",
			"        uiTicketProvider = DependencyResolver.resolve<UiTicketProvider>(UiTicketProvider);",
			"        loginThroughAPI();",
			"        ticketPage.newTicketIsVisible(ctx);",
			"    });",
			"",
			"    _it(\"${2:testName}\", [], (ctx: Context) => {",
			"        $0",
			"    });",
			"});"
		]
	}
}